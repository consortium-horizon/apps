<?php
namespace Aelia;
if (!defined('APPLICATION')) exit();

/**
 * Session class. It extends standard Gdn_Session class to provide a transient
 * key for guest users as well.
 */
class Session extends \Gdn_Session {
	// @var Logger The Logger used by the class.
	private $_Log;

	/**
	 * Returns the instance of the Logger used by the class.
	 *
	 * @param Logger An instance of the Logger.
	 */
	protected function Log() {
		if(empty($this->_Log)) {
			$this->_Log = \LoggerPlugin::GetLogger(get_called_class());
		}

		return $this->_Log;
	}

	/**
	 * Returns the transient key for both authenticated and guest users. The method
	 * follows the same logic of Gdn_Session::TransientKey(), with the addition of
	 * storing a transient key for guest users as well.
	 *
	 * @param string NewKey The new transient key to store for the user, if any
	 * @return string
   * @see Gdn_Session::TransientKey()
	 */
	public function TransientKey($NewKey = null) {
		// If User is logged in, just use standard method, which works fine
		if($this->UserID > 0) {
			return parent::TransientKey($NewKey);
		}

		// Handle transient key for guest users
		if(is_null($NewKey)) {
			// Retrieve stored transient key
			$TransientKey = $this->Stash('TransientKey', null, false);

			// If no key was stored, generate a random one
			if(empty($TransientKey)) {
				$TransientKey = RandomString(12);
			}
		}
		$this->_TransientKey = $this->Stash('TransientKey', $TransientKey, false);
		return $this->_TransientKey;
	}

  /**
   * Starts a session and stores a Transient Key for the User. The method follows
   * the same logic of Gdn_Session::Start(), with the addition of storing a
   * transient key for guest users as well.
   *
   * @param int $UserID The UserID to start the session with.
   * @param bool $SetIdentity Whether or not to set the identity (cookie) or make this a one request session.
   * @param bool $Persist If setting an identity, should we persist it beyond browser restart?
   * @see Gdn_Session::Start()
   */
	public function Start($UserID = false, $SetIdentity = true, $Persist = false) {
		// If User is logged in, just use standard method, which works fine
		parent::Start($UserID, $SetIdentity, $Persist);

		// If User is a guest, generate and store a transient key
		if(($UserID <= 0) && ($this->_TransientKey == false)) {
			$this->_TransientKey = $this->TransientKey();
		}
	}

   /**
    * Validates that the foreign key passed as a parameter matches the transient
    * key generated by the current user.
    *
    * @param string $ForeignKey The key to validate.
    * @return bool
    * @see Gdn_Session::ValidateTransientKey()
    */
	public function ValidateTransientKey($ForeignKey, $ValidateUser = true) {
		// Debug
		//var_dump("FK: $ForeignKey");
		//var_dump("TK: " . $this->_TransientKey);die();

		return parent::ValidateTransientKey($ForeignKey, $ValidateUser);
	}
}
