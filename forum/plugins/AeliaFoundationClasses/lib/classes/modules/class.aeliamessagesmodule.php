<?php
namespace Aelia;
if (!defined('APPLICATION')) exit();

use \LoggerLevel as LoggerLevel;

/**
 * Renders the widget that displays the Award Classes.
 */
class MessagesModule extends Module {
	// @var string The Asset Target where the module will be rendered
	protected $_AssetTarget = 'Content';

	protected $Messages = array();

	// @var array CSS Classes used to display the messages generated by the plugin
	protected $MessageCssClasses = array(
		LoggerLevel::FATAL => 'Fatal',
		LoggerLevel::ERROR => 'Error',
		LoggerLevel::WARN => 'Warning',
		LoggerLevel::INFO => 'Information',
		LoggerLevel::DEBUG => 'Debug',
		LoggerLevel::TRACE => 'Trace',
	);

	// @var array Message headers display on top of message lists
	protected $MessageHeaders = array(
		// Message headers are populated inside the constructor
	);

	public function __construct($Sender = '', array $Messages) {
		$this->InitializeMessageHeaders();
		$this->SetMessages($Messages);

		parent::__construct($Sender);
	}

	/**
	 * Initialises the message headers.
	 */
	protected function InitializeMessageHeaders() {
		$this->MessageHeaders = array(
			LoggerLevel::FATAL => T('Fatal'),
			LoggerLevel::ERROR => T('Error'),
			LoggerLevel::WARN => T('Warning'),
			LoggerLevel::INFO => T('Information'),
			LoggerLevel::DEBUG => T('Debug'),
			LoggerLevel::TRACE => T('Trace'),
		);
	}

	/**
	 * Loads the list of the configured Award Classes.
	 *
	 * @param int MaxEntries The maximum amount of entries to load.
	 */
	protected function SetMessages(array $Messages) {
		$this->Messages = $Messages;
	}

	/**
	 * Returns the header to be displayed for a specific message level.
	 *
	 * @param int Level The message level.
	 * @return string
	 */
	protected function GetMessageHeader($Level) {
		return GetValue($Level, $this->MessageHeaders, '');
	}


	/**
	 * Displays all stored messages.
	 */
	protected function DisplayMessages() {
		if(empty($this->Messages)) {
			return;
		}

		$LastMessageLevel = null;
		foreach($this->Messages as $Message) {
			if(!($Message instanceof Message)) {
				$this->Log()->error(sprintf(T('Message to display is not an instance of Aelia\Message. ' .
																			'Incorrect message (JSON): %s'),
																		json_encode($Message)));
			}

			$CssClass = GetValue($Message->Level, $this->MessageCssClasses, '');

			if($Message->Level != $LastMessageLevel) {
				if(!empty($LastMessageLevel)) {
					echo '</div>';
				}
				echo '<div class="Container ' . $CssClass . '">';

				$MessageHeader = $this->GetMessageHeader($Message->Level);
				if(!empty($MessageHeader)) {
					echo '<h4 class="Message Header">';
					echo $MessageHeader;
					echo '</h4>';
				}
			}

			$OutputMessage = empty($Message->Code) ? '' : $Message->Code . ' ';
			$OutputMessage .= $Message->Message;
			echo '<p class="Message">';
			echo $OutputMessage;
			echo '</p>';

			$LastMessageLevel = $Message->Level;
		}
		echo '</div>';
	}

	/**
	 * Renders the output for the module.
	 *
	 * @return string The HTML generated by the module.
	 */
	public function ToString() {
		if(empty($this->Messages)) {
			return;
		}

		ob_start();

		echo '<div id="AeliaMessages">';
		$this->DisplayMessages();
		echo '</div>';

		$Output = ob_get_contents();
		@ob_end_clean();
		return $Output;
	}
}
